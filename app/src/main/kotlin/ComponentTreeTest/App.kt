/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ComponentTreeTest

import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.SupervisorJob
import java.awt.*
import javax.swing.*
import kotlin.coroutines.CoroutineContext

class AppView : JFrame(), CoroutineScope {
    private val job: Job = SupervisorJob()
    override val coroutineContext: CoroutineContext
        get() = job + Dispatchers.Main

    val appScreen = AppScreen()

    init {
        initSelf()
        initComponents()
        positionComponents()
    }

    private fun initSelf() {
        size = Dimension(800, 600)
        setLocationRelativeTo(null)
        defaultCloseOperation = EXIT_ON_CLOSE
    }

    private fun initComponents() {

    }

    private fun positionComponents() {
        layout = BorderLayout()
        add(appScreen, BorderLayout.CENTER)
    }

}

class AppScreen : AbstractScreen() {
    val toggleButtonPanel = JPanel()
    val toggleButton = JToggleButton()
    val buttonPanel = JPanel()
    val buttonA = JButton()
    val buttonB = JButton()
    val buttonC = JButton()
    val textPanel = JPanel()
    val textA = JTextField()
    val textB = JTextField()
    val textC = JTextField()

    val subPanelContainer = JPanel()
    val subPanelA = JPanel()
    val subPanelB = JPanel()
    val subPanelC = JPanel()

    val subPanelLabel = JLabel()
    val subPanelTextField = JTextField()

    init {
        initSelf()
        initComponents()
        positionComponents()
    }

    private fun initSelf() {

    }

    private fun initComponents() {
        for (panel in setOf(toggleButtonPanel, buttonPanel, textPanel, subPanelContainer)) {
            panel.background = Color.BLACK
        }
        buttonA.text = "A"
        buttonB.text = "B"
        buttonC.text = "C"

        subPanelA.border = BorderFactory.createLineBorder(Color.WHITE, 10)
        subPanelB.border = BorderFactory.createLineBorder(Color.BLACK, 10)
        subPanelC.border = BorderFactory.createLineBorder(Color.WHITE, 10)

        subPanelLabel.text = "Example Label Text"
    }

    private fun positionComponents() {
        toggleButtonPanel.apply {
            layout = GridBagLayout()
            val c = GridBagConstraints()
            c.weightx = 0.33
            c.weighty = 1.00
            c.fill = GridBagConstraints.BOTH
            c.insets = Insets(10, 10, 10, 10)
            c.gridx = 0
            toggleButton.preferredSize = Dimension()
            add(toggleButton, c)
            c.gridx++
            add(Box.createGlue(), c)
            c.gridx++
            add(Box.createGlue(), c)
        }

        buttonPanel.apply {
            layout = GridBagLayout()
            val c = GridBagConstraints()
            c.weightx = 0.33
            c.weighty = 1.00
            c.fill = GridBagConstraints.BOTH
            c.insets = Insets(10, 10, 10, 10)
            c.gridx = 0
            buttonA.preferredSize = Dimension()
            add(buttonA, c)
            c.gridx++
            buttonB.preferredSize = Dimension()
            add(buttonB, c)
            c.gridx++
            buttonC.preferredSize = Dimension()
            add(buttonC, c)
        }

        textPanel.apply {
            layout = GridBagLayout()
            val c = GridBagConstraints()
            c.weightx = 0.33
            c.weighty = 1.00
            c.fill = GridBagConstraints.BOTH
            c.insets = Insets(10, 10, 10, 10)
            c.gridx = 0
            textA.preferredSize = Dimension()
            add(textA, c)
            c.gridx++
            textB.preferredSize = Dimension()
            add(textB, c)
            c.gridx++
            textC.preferredSize = Dimension()
            add(textC, c)
        }

        subPanelContainer.apply {
            layout = BorderLayout()
            add(subPanelA, BorderLayout.CENTER)
        }

        subPanelA.apply {
            layout = BorderLayout()
            add(subPanelB, BorderLayout.CENTER)
        }

        subPanelB.apply {
            layout = BorderLayout()
            add(subPanelC, BorderLayout.CENTER)
        }

        subPanelC.apply {
            layout = GridBagLayout()
            val c = GridBagConstraints()
            c.weightx = 0.50
            c.weighty = 1.00
            c.fill = GridBagConstraints.BOTH
            c.insets = Insets(10, 10, 10, 10)
            c.gridx = 0
            subPanelLabel.preferredSize = Dimension()
            add(subPanelLabel, c)
            c.gridx++
            add(subPanelTextField, c)
        }

        layout = GridBagLayout()
        val c = GridBagConstraints()
        c.weightx = 1.00
        c.weighty = 0.25
        c.fill = GridBagConstraints.BOTH
        c.insets = Insets(10, 10, 10, 10)
        c.gridy = 0
        toggleButtonPanel.preferredSize = Dimension()
        add(toggleButtonPanel, c)
        c.gridy++
        buttonPanel.preferredSize = Dimension()
        add(buttonPanel, c)
        c.gridy++
        textPanel.preferredSize = Dimension()
        add(textPanel, c)
        c.gridy++
        subPanelContainer.preferredSize = Dimension()
        add(subPanelContainer, c)
    }

    fun addListeners(controller: Controller) {
        toggleButton.addActionListener(controller.toggleButtonListener)
        buttonA.addActionListener(controller.buttonAListener)
        buttonB.addActionListener(controller.buttonBListener)
        buttonC.addActionListener(controller.buttonCListener)
    }
}

fun main() {
    val appView = AppView()
    Controller(appView)
    appView.isVisible = true
//    testPrintClasses(
//        setOf(
//            JPanel().javaClass,
//            JTextField().javaClass,
//            JButton().javaClass
//        )
//    )
}

fun testPrintClasses(classes: Set<Class<Any>>) {
    classes.forEach { println(it) }
    println(JButton::class)

    println(classes.contains(JButton().javaClass))
}
